name: 'GCP Dev Environment Deployment'

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - staging
      action:
        description: 'Action to take'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_ROOT: ${{ github.workspace }}/terraform
  TF_VAR_environment_suffix: ${{ github.event.inputs.environment || 'dev' }}

permissions:
  contents: read
  pull-requests: write

jobs:
  validate:
    name: 'Validate'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup GCP Auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.4.0"
          
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan
          path: ${{ env.TF_ROOT }}

      - name: Terraform Init
        id: init
        run: |
          cd ${TF_ROOT}
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform/state/${{ github.event.inputs.environment || 'dev' }}"

      - name: Terraform Apply
        id: apply
        run: |
          cd ${TF_ROOT}
          terraform apply -auto-approve tfplan
        timeout-minutes: 60
          
  destroy:
    name: 'Destroy'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    env:
      TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
      TF_VAR_billing_account: ${{ secrets.GCP_BILLING_ACCOUNT }}
      TF_VAR_folder_id: ${{ secrets.GCP_FOLDER_ID }}
      TF_VAR_project_prefix: ${{ secrets.PROJECT_PREFIX || 'dev-env' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup GCP Auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          
      - name: Setup gcloud CLI
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.4.0"

      - name: Terraform Init
        id: init
        run: |
          cd ${TF_ROOT}
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform/state/${{ github.event.inputs.environment || 'dev' }}"

      - name: Terraform Destroy
        id: destroy
        run: |
          cd ${TF_ROOT}
          terraform destroy -auto-approve
        timeout-minutes: 60_version: "1.4.0"

      - name: Terraform Format
        id: fmt
        run: |
          cd ${TF_ROOT}
          terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          cd ${TF_ROOT}
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform/state/${{ github.event.inputs.environment || 'dev' }}"

      - name: Terraform Validate
        id: validate
        run: |
          cd ${TF_ROOT}
          terraform validate -no-color

  plan:
    name: 'Plan'
    needs: validate
    runs-on: ubuntu-latest
    env:
      TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
      TF_VAR_billing_account: ${{ secrets.GCP_BILLING_ACCOUNT }}
      TF_VAR_folder_id: ${{ secrets.GCP_FOLDER_ID }}
      TF_VAR_project_prefix: ${{ secrets.PROJECT_PREFIX || 'dev-env' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup GCP Auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.4.0"

      - name: Terraform Init
        id: init
        run: |
          cd ${TF_ROOT}
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform/state/${{ github.event.inputs.environment || 'dev' }}"

      - name: Terraform Plan
        id: plan
        run: |
          cd ${TF_ROOT}
          terraform plan -no-color -out=tfplan
        continue-on-error: true

      - name: Save Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: ${{ env.TF_ROOT }}/tfplan
          retention-days: 5

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  apply:
    name: 'Apply'
    needs: plan
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    env:
      TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
      TF_VAR_billing_account: ${{ secrets.GCP_BILLING_ACCOUNT }}
      TF_VAR_folder_id: ${{ secrets.GCP_FOLDER_ID }}
      TF_VAR_project_prefix: ${{ secrets.PROJECT_PREFIX || 'dev-env' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup GCP Auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          
      - name: Setup gcloud CLI
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform